name: Enhanced Analyzer CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 코드 품질 검사
  quality-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black mypy pytest pytest-cov

    - name: Code formatting check
      run: |
        black --check .
        flake8 . --exclude=venv,env,.git,__pycache__,.pytest_cache --max-line-length=120

    - name: Type checking
      run: |
        mypy . --ignore-missing-imports --exclude=venv --exclude=env

    - name: Security scan
      run: |
        pip install bandit safety
        bandit -r . -x ./tests/
        safety check

  # 단위 테스트
  unit-tests:
    runs-on: ubuntu-latest
    needs: quality-check
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run unit tests
      run: |
        pytest tests/test_value_style_classifier.py tests/test_uvs_eligibility_filter.py tests/test_config_manager.py --cov=. --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # 통합 테스트
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v

  # 성능 테스트
  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run performance benchmarks
      run: |
        python benchmark.py --iterations 1000 --output benchmark_results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark_results.json

  # Docker 이미지 빌드
  build-image:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deploy/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Kubernetes 배포
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        cd deploy/kubernetes
        kubectl apply -f configmap.yaml
        kubectl apply -f analyzer-deployment.yaml
        kubectl apply -f analyzer-service.yaml
        kubectl rollout status deployment/analyzer-deployment -n enhanced-analyzer

    - name: Run smoke tests
      run: |
        # 기본 헬스체크
        kubectl wait --for=condition=ready pod -l app=analyzer -n enhanced-analyzer --timeout=300s
        
        # API 테스트
        kubectl port-forward service/analyzer-service 8000:8000 -n enhanced-analyzer &
        sleep 10
        curl -f http://localhost:8000/health || exit 1

  # 프로덕션 배포
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        cd deploy/kubernetes
        kubectl apply -f configmap.yaml
        kubectl apply -f analyzer-deployment.yaml
        kubectl apply -f analyzer-service.yaml
        kubectl apply -f ingress.yaml
        kubectl apply -f hpa.yaml
        kubectl rollout status deployment/analyzer-deployment -n enhanced-analyzer

    - name: Run production tests
      run: |
        # 헬스체크
        kubectl wait --for=condition=ready pod -l app=analyzer -n enhanced-analyzer --timeout=300s
        
        # 모니터링 설정 확인
        kubectl apply -f ../monitoring/prometheus-config.yaml
        kubectl apply -f ../monitoring/alertmanager-config.yaml

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # 롤백 (실패시)
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    environment: ${{ github.ref == 'refs/heads/develop' && 'staging' || 'production' }}
    
    steps:
    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Rollback deployment
      run: |
        kubectl rollout undo deployment/analyzer-deployment -n enhanced-analyzer
        kubectl rollout status deployment/analyzer-deployment -n enhanced-analyzer

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: 'Deployment failed and rolled back'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}













